<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://waloncab.github.io/s.ln_blog//s.ln_blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://waloncab.github.io/s.ln_blog//s.ln_blog/" rel="alternate" type="text/html" /><updated>2022-02-25T15:19:23+01:00</updated><id>https://waloncab.github.io/s.ln_blog//s.ln_blog/feed.xml</id><title type="html">walon/cab:s.ln_blog</title><subtitle>s.Ln-Blog about curved-lines and graphics development. Working with procedural content generation inside the unity-3d game engine. Algorithms for visual arts, check out the spline lab.</subtitle><entry><title type="html">Audio Visualization sp.002</title><link href="https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/audio/visualization/2021/12/05/audio-visualization-003.html" rel="alternate" type="text/html" title="Audio Visualization sp.002" /><published>2021-12-05T10:44:49+01:00</published><updated>2021-12-05T10:44:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/audio/visualization/2021/12/05/audio-visualization-003</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/audio/visualization/2021/12/05/audio-visualization-003.html">&lt;p&gt;Piano key strokes are more fun when you visualize in some form or another the sound produced.
Closed spline shape rendered along this small piano track, notice the small fast waves the contour forms.
Very pleasant effect that could be applied to many more music tracks like this.&lt;/p&gt;</content><author><name>waloncab</name></author><category term="demos" /><category term="audio" /><category term="visualization" /><summary type="html">Piano key strokes are more fun when you visualize in some form or another the sound produced. Closed spline shape rendered along this small piano track, notice the small fast waves the contour forms. Very pleasant effect that could be applied to many more music tracks like this.</summary></entry><entry><title type="html">Audio Visualization sp.002</title><link href="https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/audio/visualization/2021/12/04/audio-visualization-002.html" rel="alternate" type="text/html" title="Audio Visualization sp.002" /><published>2021-12-04T10:44:49+01:00</published><updated>2021-12-04T10:44:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/audio/visualization/2021/12/04/audio-visualization-002</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/audio/visualization/2021/12/04/audio-visualization-002.html">&lt;p&gt;Everything you see in the video is generated at run-time. This time the audio visualizer uses 
not just a simple mesh but a line renderer to distinguish the contour of the shape.
The drums make the shape generate aggressive but very pleasant curves.&lt;/p&gt;</content><author><name>waloncab</name></author><category term="demos" /><category term="audio" /><category term="visualization" /><summary type="html">Everything you see in the video is generated at run-time. This time the audio visualizer uses not just a simple mesh but a line renderer to distinguish the contour of the shape. The drums make the shape generate aggressive but very pleasant curves.</summary></entry><entry><title type="html">Audio Visualization sp.001</title><link href="https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/audio/visualization/2021/12/03/audio-visualization-001.html" rel="alternate" type="text/html" title="Audio Visualization sp.001" /><published>2021-12-03T10:44:49+01:00</published><updated>2021-12-03T10:44:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/audio/visualization/2021/12/03/audio-visualization-001</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/audio/visualization/2021/12/03/audio-visualization-001.html">&lt;p&gt;This video demonstrates how frequency bands can be used to make dynamic meshes. 
The mesh is modified at real-time by a redial disposition of those bands.
Notice that the code for this representation is being optimized since modifying a mesh every frame 
is an expensive task no matter how simple the mesh might be.&lt;/p&gt;</content><author><name>waloncab</name></author><category term="demos" /><category term="audio" /><category term="visualization" /><summary type="html">This video demonstrates how frequency bands can be used to make dynamic meshes. The mesh is modified at real-time by a redial disposition of those bands. Notice that the code for this representation is being optimized since modifying a mesh every frame is an expensive task no matter how simple the mesh might be.</summary></entry><entry><title type="html">Reel Showcase</title><link href="https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/spline/2021/11/25/breath-animation.html" rel="alternate" type="text/html" title="Reel Showcase" /><published>2021-11-25T10:44:49+01:00</published><updated>2021-11-25T10:44:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/spline/2021/11/25/breath-animation</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/spline/2021/11/25/breath-animation.html">&lt;p&gt;This time with breathing graphics, real time parallel processing for dynamic spline follow.
Closed loop behavior algorithm allows to follow any closed line shape at a constant speed. 
One big challenge is keep the iteration distance independent from the actual spline path that we’re iterating through.&lt;/p&gt;

&lt;p&gt;Stay tuned for more videos like this, the spline lab is working on awesome new stuff.&lt;/p&gt;</content><author><name>waloncab</name></author><category term="demos" /><category term="spline" /><summary type="html">This time with breathing graphics, real time parallel processing for dynamic spline follow. Closed loop behavior algorithm allows to follow any closed line shape at a constant speed. One big challenge is keep the iteration distance independent from the actual spline path that we’re iterating through.</summary></entry><entry><title type="html">Organic Algorithms</title><link href="https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/spline/2021/11/25/organic-algorithms.html" rel="alternate" type="text/html" title="Organic Algorithms" /><published>2021-11-25T10:44:49+01:00</published><updated>2021-11-25T10:44:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/spline/2021/11/25/organic-algorithms</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/spline/2021/11/25/organic-algorithms.html">&lt;p&gt;
    Splines are some of the most organic pieces of graphics sofware you can find out there.
    This video is about how to add organic movement to the points conforming the line shape.
    Kinematic alogorithms use different interpolation methods to transport the spline dots smothly in space. 
    When we combine the lerp effect with some random seed generation to determine where to move the desired dot, 
    we achive some result similar to the one in the video. The spline lab is working on awesome new stuff.
&lt;/p&gt;</content><author><name>waloncab</name></author><category term="demos" /><category term="spline" /><summary type="html">Splines are some of the most organic pieces of graphics sofware you can find out there. This video is about how to add organic movement to the points conforming the line shape. Kinematic alogorithms use different interpolation methods to transport the spline dots smothly in space. When we combine the lerp effect with some random seed generation to determine where to move the desired dot, we achive some result similar to the one in the video. The spline lab is working on awesome new stuff.</summary></entry><entry><title type="html">Motion Graphics</title><link href="https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/spline/2021/11/25/motion-graphics.html" rel="alternate" type="text/html" title="Motion Graphics" /><published>2021-11-25T10:44:49+01:00</published><updated>2021-11-25T10:44:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/spline/2021/11/25/motion-graphics</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/spline/2021/11/25/motion-graphics.html">&lt;p&gt;
    Scaling the project to handle different types of lines and the technology around them. 
    ollowing path behavior within procedural line animations to make pleasant effects.
&lt;/p&gt;

&lt;!--more--&gt;</content><author><name>waloncab</name></author><category term="demos" /><category term="spline" /><summary type="html">Scaling the project to handle different types of lines and the technology around them. ollowing path behavior within procedural line animations to make pleasant effects.</summary></entry><entry><title type="html">Reel Showcase</title><link href="https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/spline/procedural/2021/11/25/demo_reel-AAA.html" rel="alternate" type="text/html" title="Reel Showcase" /><published>2021-11-25T10:44:49+01:00</published><updated>2021-11-25T10:44:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/spline/procedural/2021/11/25/demo_reel-AAA</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog//s.ln_blog/demos/spline/procedural/2021/11/25/demo_reel-AAA.html">&lt;p&gt;
This video shows how the project is growing. Traversing splines in real time is hard, it takes certain amount of computational effort.
So in order to handle all of this movement without lag, a parallel approach has been introduced to certain algorithms.
&lt;/p&gt;</content><author><name>waloncab</name></author><category term="demos" /><category term="spline" /><category term="procedural" /><summary type="html">This video shows how the project is growing. Traversing splines in real time is hard, it takes certain amount of computational effort. So in order to handle all of this movement without lag, a parallel approach has been introduced to certain algorithms.</summary></entry><entry><title type="html">Casteljau’s Algorithm</title><link href="https://waloncab.github.io/s.ln_blog//s.ln_blog/blog/bezier/spline/2021/11/20/Casteljau's-Algorithm.html" rel="alternate" type="text/html" title="Casteljau’s Algorithm" /><published>2021-11-20T08:56:49+01:00</published><updated>2021-11-20T08:56:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog//s.ln_blog/blog/bezier/spline/2021/11/20/Casteljau&apos;s%20Algorithm</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog//s.ln_blog/blog/bezier/spline/2021/11/20/Casteljau&apos;s-Algorithm.html">&lt;p&gt;Sometimes you need to define n-point curves, and generic bezier may fit your needs in those cases.
The following lines of code represent how to design a generic bezier curve, n-grade curve.
This algorithm uses recursion to iterate throw the entire interpolation points.&lt;/p&gt;

&lt;p&gt;Parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;points: the vector containing the curve modeling points.&lt;/li&gt;
  &lt;li&gt;t: the interpolation state [0 - 1]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice the interpolation parameter t affects the entire curve and it does not depend
on the number of points the curve is defined.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPoint_R&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recursive_call&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPoint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;recursive_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPoint_R&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recursive_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>waloncab</name></author><category term="blog" /><category term="bezier" /><category term="spline" /><summary type="html">Sometimes you need to define n-point curves, and generic bezier may fit your needs in those cases. The following lines of code represent how to design a generic bezier curve, n-grade curve. This algorithm uses recursion to iterate throw the entire interpolation points.</summary></entry><entry><title type="html">DSL Fluent</title><link href="https://waloncab.github.io/s.ln_blog//s.ln_blog/blog/software/2021/11/19/DSL-Fluent.html" rel="alternate" type="text/html" title="DSL Fluent" /><published>2021-11-19T08:56:49+01:00</published><updated>2021-11-19T08:56:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog//s.ln_blog/blog/software/2021/11/19/DSL-Fluent</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog//s.ln_blog/blog/software/2021/11/19/DSL-Fluent.html">&lt;p&gt;We can define a domain-specific language (DSL) as a programming language specialized to a particular application domain.
In this blog post we understand some key concepts and use cases inside the lines framework.&lt;/p&gt;

&lt;p&gt;An interface was needed for programable movement along lines. In this specific case a custom DSL
allows to program simple instructions without understanding any of the inner working of the framework.&lt;/p&gt;

&lt;p&gt;There is a sharp definition between the general purpose language that host the framework and the
domain specific language stored in scripts that can later be process. Encapsulating instructions in scripts 
make this kind of code highly reusable along different components.&lt;/p&gt;

&lt;p&gt;We are using an expression builder to construct the graph that represents a movement state machine.
In this case we are not working with simple value assignments or defined instructions. 
The DSL represents a complex data structure, expression builders need to be defined 
for each new sentence.&lt;/p&gt;

&lt;p&gt;Lets analyze a fluent API and the elements we are using here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;ExpressionBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExpressionBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExpressionBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExpressionBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MoveBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;move_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExpressionBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MoveBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;move_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExpressionBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExpressionBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MoveBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                                    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;move_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.7f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExpressionBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MoveBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
                                    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;move_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decide_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sequence_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loop_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This expression tree builds a complex graph State-Machine.
The fluent interface allows to link instructions in a natural expressive way.
Notice the difference between the terminal and non-terminal expressions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Terminal:
  Represent the behavior we want to add to the graph.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Non-Terminal:
  Integrate flow control with elements such as loop, sequences and decisions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fluent APIs are popular among DSL, according to Wikipedia a fluent API is a way of implementing 
object oriented code with a more natural and human readable interface. 
Method chaining is used to relay the instruction context of a subsequent expression.
But there are more elements to consider in those concrete languages.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Method Chaining&lt;/li&gt;
  &lt;li&gt;Method Cascading&lt;/li&gt;
  &lt;li&gt;Progressive Interfaces&lt;/li&gt;
&lt;/ul&gt;</content><author><name>waloncab</name></author><category term="blog" /><category term="software" /><summary type="html">We can define a domain-specific language (DSL) as a programming language specialized to a particular application domain. In this blog post we understand some key concepts and use cases inside the lines framework.</summary></entry><entry><title type="html">SLines Reel</title><link href="https://waloncab.github.io/s.ln_blog//s.ln_blog/blog/jekyll/update/bezier/2021/11/13/sLines-lore.html" rel="alternate" type="text/html" title="SLines Reel" /><published>2021-11-13T08:56:49+01:00</published><updated>2021-11-13T08:56:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog//s.ln_blog/blog/jekyll/update/bezier/2021/11/13/sLines-lore</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog//s.ln_blog/blog/jekyll/update/bezier/2021/11/13/sLines-lore.html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent vulputate, massa quis vestibulum tincidunt, nulla erat ornare dui, vel pharetra erat neque quis ex. Ut quis dictum lorem. Curabitur et varius tellus, eu pulvinar ante.&lt;!--more--&gt;Fusce eget enim vitae diam mollis congue. Sed at aliquam orci, vel placerat tortor. In rutrum fringilla orci, et auctor urna laoreet sed. Donec ut elementum libero. Etiam facilisis ut arcu nec sagittis. Suspendisse finibus turpis eget nisl euismod pretium. Nulla facilisi. Vivamus mattis ante leo, vitae ullamcorper ex dignissim in. Cras molestie varius est pharetra venenatis.&lt;/p&gt;

&lt;p&gt;Maecenas tempor massa sed aliquet mattis. Nam ac arcu arcu. Nunc tempor vel urna vitae tristique. Quisque aliquam efficitur nibh, quis dignissim velit vulputate non. Mauris ultricies urna at mattis vestibulum. Etiam fringilla neque non magna facilisis pellentesque. Vestibulum ultricies pulvinar nisi, dignissim efficitur sem pretium a. Nulla tincidunt eget ligula at convallis. Donec porta nunc sit amet sapien lobortis, et commodo nisl pharetra. Sed eros sem, condimentum a eros eget, tincidunt mattis mauris.&lt;/p&gt;

&lt;p&gt;Aenean accumsan, orci eu sagittis lacinia, risus metus elementum metus, et consectetur odio enim quis nisl. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Vivamus convallis nisi enim, eget ultrices diam auctor eget. Nunc sit amet faucibus eros. Donec sit amet ante quis tellus fermentum ultricies sit amet non sapien. Maecenas auctor ligula eu laoreet sagittis. Proin aliquet mi sit amet hendrerit laoreet. Vestibulum enim augue, posuere at libero in, pellentesque rutrum odio. Vivamus faucibus neque vel felis egestas ullamcorper. Aenean nec enim sem.&lt;/p&gt;

&lt;p&gt;Nulla at mauris erat. Sed scelerisque, mauris vel tincidunt malesuada, diam nulla scelerisque eros, ac rutrum odio dolor et augue. Vivamus at gravida lectus, non imperdiet felis. Curabitur suscipit dui vitae enim ullamcorper tristique sed a ex. Nulla facilisi. Suspendisse convallis sapien rutrum, posuere odio vel, luctus magna. Etiam vitae accumsan velit, at feugiat dolor. Aenean bibendum porttitor quam, ac maximus lacus accumsan eget. Vivamus fermentum elit id ligula vehicula, eu posuere eros aliquam. In at scelerisque tellus. Sed mattis porta faucibus. Cras euismod lacus in diam viverra, a tempor arcu consectetur. Quisque consequat vel ligula et sodales. Ut leo tortor, accumsan a sodales id, congue ut metus. Interdum et malesuada fames ac ante ipsum primis in faucibus.&lt;/p&gt;

&lt;p&gt;Nunc placerat fermentum ex sit amet consequat. Etiam pellentesque congue lobortis. Nulla mollis libero et diam bibendum, eu ornare nibh lacinia. Donec malesuada felis sit amet ex pellentesque, vitae placerat turpis cursus. Aenean vehicula massa vel diam molestie bibendum. Nam vulputate tortor erat, at dignissim libero pellentesque volutpat. Vestibulum nec congue enim. Mauris lacinia neque fringilla lectus suscipit, eu sodales elit iaculis. In a velit porta, hendrerit urna eu, aliquet orci. Proin vel accumsan quam, ut sagittis velit. Aenean rhoncus, mauris in faucibus pretium, magna quam viverra purus, commodo porta sapien risus eu nulla. Donec aliquam venenatis ligula in ornare. Mauris a pretium odio. Donec egestas eros mi, nec ornare ipsum pharetra id.&lt;/p&gt;</content><author><name>waloncab</name></author><category term="blog" /><category term="jekyll" /><category term="update" /><category term="bezier" /><summary type="html">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent vulputate, massa quis vestibulum tincidunt, nulla erat ornare dui, vel pharetra erat neque quis ex. Ut quis dictum lorem. Curabitur et varius tellus, eu pulvinar ante.</summary></entry></feed>