<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://waloncab.github.io/s.ln_blog/s.ln_blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://waloncab.github.io/s.ln_blog/s.ln_blog/" rel="alternate" type="text/html" /><updated>2022-07-23T12:01:50+02:00</updated><id>https://waloncab.github.io/s.ln_blog/s.ln_blog/feed.xml</id><title type="html">walon/cab:s.ln_blog</title><subtitle>Graphics rendering and spline algorithms. Kinematics from the bezier curves by  traversing generated paths, then embedding them into rendering and game engines. Stay tunned for the Spline Lab!</subtitle><entry><title type="html">Git Commit Automation with Python</title><link href="https://waloncab.github.io/s.ln_blog/s.ln_blog/blog/jekyll/pyhton/git/2022/07/20/git_automation.html" rel="alternate" type="text/html" title="Git Commit Automation with Python" /><published>2022-07-20T17:00:00+02:00</published><updated>2022-07-20T17:00:00+02:00</updated><id>https://waloncab.github.io/s.ln_blog/s.ln_blog/blog/jekyll/pyhton/git/2022/07/20/git_automation</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog/s.ln_blog/blog/jekyll/pyhton/git/2022/07/20/git_automation.html"><![CDATA[<p>This web page is a complex piece of software. There are a few layers that composes the web, having jekyll as the backend and standard html, css, and javascript on the front-end.
Since jekyll is a lightweight static web page generator, the site has to be built before uploading it to any remote server. This is a very repetitive process that could be automated.
In this blog post we are going to see a simple way to use git version control from Pyhton and upload the built web-page to github and then enable github-pages.</p>

<p>Steps:</p>

<ul>
  <li>use [ jekyll bundle build ] to build the web page into the _site folder.</li>
  <li>copy the _site folder to some other folder and start a git repository in there.</li>
  <li>automate the git commit with the following lines of code.</li>
</ul>

<p>Make sure you have previously installed the corresponding git package into your Python ( use pip install )</p>

<figure class="highlight"><pre><code class="language-pyhton" data-lang="pyhton">    pip install GitPython</code></pre></figure>

<p>The following lines specify the basic operations that can be done with your repository. 
Here, a random word function is being used to generate the commit identification message.</p>

<figure class="highlight"><pre><code class="language-pyhton" data-lang="pyhton">repo = Repo('/your_site_path')

# list all branches
for branch in repo.branches:
    print(branch)

def randomword(length):
   letters = string.ascii_lowercase
   return ''.join(random.choice(letters) for i in range(length))

rand_commit_m = randomword(8)

# to checkout to a branch:
repo.git.checkout('master')

# add files
repo.git.add(all=True)

# check differences between current files and last commit
diff = repo.git.diff(repo.head.commit.tree)

# commit
repo.index.commit(rand_commit_m)</code></pre></figure>]]></content><author><name>waloncab</name></author><category term="blog" /><category term="jekyll" /><category term="pyhton" /><category term="git" /><summary type="html"><![CDATA[This web page is a complex piece of software. There are a few layers that composes the web, having jekyll as the backend and standard html, css, and javascript on the front-end. Since jekyll is a lightweight static web page generator, the site has to be built before uploading it to any remote server. This is a very repetitive process that could be automated. In this blog post we are going to see a simple way to use git version control from Pyhton and upload the built web-page to github and then enable github-pages. Steps: use [ jekyll bundle build ] to build the web page into the _site folder. copy the _site folder to some other folder and start a git repository in there. automate the git commit with the following lines of code. Make sure you have previously installed the corresponding git package into your Python ( use pip install ) pip install GitPython The following lines specify the basic operations that can be done with your repository. Here, a random word function is being used to generate the commit identification message. repo = Repo('/your_site_path') # list all branches for branch in repo.branches: print(branch) def randomword(length): letters = string.ascii_lowercase return ''.join(random.choice(letters) for i in range(length)) rand_commit_m = randomword(8) # to checkout to a branch: repo.git.checkout('master') # add files repo.git.add(all=True) # check differences between current files and last commit diff = repo.git.diff(repo.head.commit.tree) # commit repo.index.commit(rand_commit_m)]]></summary></entry><entry><title type="html">Rendering Engine Architecture</title><link href="https://waloncab.github.io/s.ln_blog/s.ln_blog/blog/jekyll/pyhton/git/2022/07/20/rendering_engine_architecture.html" rel="alternate" type="text/html" title="Rendering Engine Architecture" /><published>2022-07-20T17:00:00+02:00</published><updated>2022-07-20T17:00:00+02:00</updated><id>https://waloncab.github.io/s.ln_blog/s.ln_blog/blog/jekyll/pyhton/git/2022/07/20/rendering_engine_architecture</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog/s.ln_blog/blog/jekyll/pyhton/git/2022/07/20/rendering_engine_architecture.html"><![CDATA[]]></content><author><name>waloncab</name></author><category term="blog" /><category term="jekyll" /><category term="pyhton" /><category term="git" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Matrix Transformation for Rendering 3D objects</title><link href="https://waloncab.github.io/s.ln_blog/s.ln_blog/blog/jekyll/pyhton/git/2022/07/20/matrix_transformations.html" rel="alternate" type="text/html" title="Matrix Transformation for Rendering 3D objects" /><published>2022-07-20T17:00:00+02:00</published><updated>2022-07-20T17:00:00+02:00</updated><id>https://waloncab.github.io/s.ln_blog/s.ln_blog/blog/jekyll/pyhton/git/2022/07/20/matrix_transformations</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog/s.ln_blog/blog/jekyll/pyhton/git/2022/07/20/matrix_transformations.html"><![CDATA[<h3> Matrix Transformations & Rendering 3D</h3>

<p>
    Transformations are at the core of any rendering engine. 
    Vectors and matrices are the basic data structures that allow to
    desgin and create functions to transform set of points 
    in certain geometric way.
</p>

<h3> Points / Vectors / Matrices</h3>
<p>
    Both points and vectors are represented by a list of numbers, but they have different geometric interpretations.
    Points are simple a defined position in a space but vectors represent a direction within that space.
    Matrices are the best mathematical construct to apply transformations to the points and vectors, GPUs are highly optimized
    to compute matrix multiplications in parallel.
</p>

<h3> What kind of operations are needed in the 3D space ? </h3>

<p>Well, in any rendering engine, we require the following:</p>

- translation
- rotation
- scale

<p> Keep reding the text and imagine that transformations are applied from the origin of the coordinate system (global coordinates), 
    we'll consider local transformations later  </p>

<h3>4x4 Matrix in a 3D Space</h3>

<p> <a href="https://en.wikipedia.org/wiki/Homogeneous_coordinates">homogeneuos coordinates</a> are a system of coordinates used in projective geometry.
    They have the advantage that the coordinates of points, including points at infinity, can be represented using finite coordinates.
    Since translation is not a linear transformation we need to embed 3x3 matrices in a 4x4 matrices, <a href="https://en.wikipedia.org/wiki/Translation_(geometry)">find out why</a>
</p>

<h3> Basic Transformation Matrices</h3>

<p>
For any given object we need to translate, rotate, and scale. Each one of this scene objects need to store transformation data in a 4x4 matrix. 
The matrix multiplication allow to easily modify the transformation data the object stores.
The following blocks of code create the most basic matrices in numpy arrays.
</p>

<h3>Model Matrix</h3>

    <p>
    A matrix is used to store the transformation of any object, but what about the points / vertices of that object in the case that 
    it renders some kind of mesh ?
    </p>

    <p>Storing the transformation in the model matrix allows : </p>

    <ul>
        <li>- chain transformations by multiplying the model matrix of the object, the result matrix will store the acumulated transformatins.</li>
        <li>- render a complex mesh without having to store the vertices of the mesh inside the object.</li>
    </ul>

<figure class="highlight"><pre><code class="language-pyhton" data-lang="pyhton">def init_Identity():

    return np.array( [
        [1, 0, 0, 0],
        [0, 1, 0, 0],
        [0 ,0, 1, 0],
        [0, 0, 0, 1]
    ]).astype(float)</code></pre></figure>

<figure class="highlight"><pre><code class="language-pyhton" data-lang="pyhton">def init_Translation(x,y,z):

    return np.array( [
        [1, 0, 0, x],
        [0, 1, 0, y],
        [0 ,0, 1, z],
        [0, 0, 0, 1]
    ]).astype(float)</code></pre></figure>

<p>
    The followings lines of code represent the rotation matrices for the x,y,z axes.
    Rotation happens around an axis, and the rotation matrix does not move the axis.
    Rotation can be produced arond any vector, but we are considering just the rotation around the 
    basis vectors (axis) since other roations can be derived later from the world matrix.
</p>

<figure class="highlight"><pre><code class="language-pyhton" data-lang="pyhton">def init_RotationX(angle):

    c = cos(angle)
    s = sin(angle)

    return np.array( [
        [1, 0,  0, 0],
        [0, c, -s, 0],
        [0 ,s,  c, 0],
        [0, 0,  0, 1]
    ]).astype(float)

def init_RotationY(angle):

    c = cos(angle)
    s = sin(angle)

    return np.array( [
        [ c, 0, s, 0],
        [ 0, 1, 0, 0],
        [-s ,0, c, 0],
        [ 0, 0, 0, 1]
    ]).astype(float)

def init_RotationZ(angle):

    c = cos(angle)
    s = sin(angle)

    return np.array( [
        [c, -s, 0, 0],
        [s, c, 0, 0],
        [0 ,0, 1, 0],
        [0, 0, 0, 1]
    ]).astype(float)</code></pre></figure>

<p>
    This scale matrix only accepts one parameter scaling the object uniformly along the x,y, axes.
</p>

<figure class="highlight"><pre><code class="language-pyhton" data-lang="pyhton">def init_Scale(s):

    return np.array( [
        [s, 0, 0, 0],
        [0, s, 0, 0],
        [0 ,0, s, 0],
        [0, 0, 0, 1]
    ]).astype(float)</code></pre></figure>

<h3> Local vs Global Coordinates </h3>

<p>
    When we multiply any of the previous matrices by some point we are transforming that point in a global coordinate system (Origin(0,0,0)). 
    For example, when multiplying a point by the translation matrix the point moves along the basis x,y,z axis.
    Local transformations requiere to define an internal local coordinate system. Origin, orientation, and scale of the
    local coordinate axes are chosen for conviniece, but usually the center of the object is selected to transform locally.
</p>

<h3> How to use matrix multiplication to perform transformations in local coordinate systems </h3>

    <p>
        Let's keep it simple, in order to perform any global transformation we chain matrix multiplications on the left side of expression.
        To achive local transformations just multiply on the right side of the expression. 
        Keep in mind that matrix multiplication is not commutative: A*B != B*A 
    </p>

    <ul>
        <li>Global Transformation: T3 * T2 * T1 * M(model_matrix)</li>
        <li>Local Transformation: M(model_matrix) * T1 * T2 * T3</li>
    </ul>

<p>
    Perspective matrix for rendering the scene.
    Frustum: truncated pyramid that defines the visible region.
    Parameters:
        - near / far distance: 
        - angle of view: the angle between fron and bottom frustom planes.
        - aspect ratio: width / height of the rendered image.
</p>

<figure class="highlight"><pre><code class="language-pyhton" data-lang="pyhton">def init_Perspective(angleOfView=60, aspectRatio=1, near=0.1, far=1000):

    #convert to radians
    a = angleOfView *pi/180
    d = 1.0 / tan(a/2)
    r = aspectRatio
    b = (far + near) / (near - far)
    c =  2 * far * near / (near - far)

    return np.array( [
        [d/r, 0, 0, 0],
        [0, d, 0, 0],
        [0 ,0, b, c],
        [0, 0, -1, 0]
    ]).astype(float)</code></pre></figure>]]></content><author><name>waloncab</name></author><category term="blog" /><category term="jekyll" /><category term="pyhton" /><category term="git" /><summary type="html"><![CDATA[Matrix Transformations & Rendering 3D Transformations are at the core of any rendering engine. Vectors and matrices are the basic data structures that allow to desgin and create functions to transform set of points in certain geometric way. Points / Vectors / Matrices Both points and vectors are represented by a list of numbers, but they have different geometric interpretations. Points are simple a defined position in a space but vectors represent a direction within that space. Matrices are the best mathematical construct to apply transformations to the points and vectors, GPUs are highly optimized to compute matrix multiplications in parallel. What kind of operations are needed in the 3D space ? Well, in any rendering engine, we require the following: - translation - rotation - scale Keep reding the text and imagine that transformations are applied from the origin of the coordinate system (global coordinates), we'll consider local transformations later 4x4 Matrix in a 3D Space homogeneuos coordinates are a system of coordinates used in projective geometry. They have the advantage that the coordinates of points, including points at infinity, can be represented using finite coordinates. Since translation is not a linear transformation we need to embed 3x3 matrices in a 4x4 matrices, find out why Basic Transformation Matrices For any given object we need to translate, rotate, and scale. Each one of this scene objects need to store transformation data in a 4x4 matrix. The matrix multiplication allow to easily modify the transformation data the object stores. The following blocks of code create the most basic matrices in numpy arrays. Model Matrix A matrix is used to store the transformation of any object, but what about the points / vertices of that object in the case that it renders some kind of mesh ? Storing the transformation in the model matrix allows : - chain transformations by multiplying the model matrix of the object, the result matrix will store the acumulated transformatins. - render a complex mesh without having to store the vertices of the mesh inside the object. def init_Identity(): return np.array( [ [1, 0, 0, 0], [0, 1, 0, 0], [0 ,0, 1, 0], [0, 0, 0, 1] ]).astype(float) def init_Translation(x,y,z): return np.array( [ [1, 0, 0, x], [0, 1, 0, y], [0 ,0, 1, z], [0, 0, 0, 1] ]).astype(float) The followings lines of code represent the rotation matrices for the x,y,z axes. Rotation happens around an axis, and the rotation matrix does not move the axis. Rotation can be produced arond any vector, but we are considering just the rotation around the basis vectors (axis) since other roations can be derived later from the world matrix. def init_RotationX(angle): c = cos(angle) s = sin(angle) return np.array( [ [1, 0, 0, 0], [0, c, -s, 0], [0 ,s, c, 0], [0, 0, 0, 1] ]).astype(float) def init_RotationY(angle): c = cos(angle) s = sin(angle) return np.array( [ [ c, 0, s, 0], [ 0, 1, 0, 0], [-s ,0, c, 0], [ 0, 0, 0, 1] ]).astype(float) def init_RotationZ(angle): c = cos(angle) s = sin(angle) return np.array( [ [c, -s, 0, 0], [s, c, 0, 0], [0 ,0, 1, 0], [0, 0, 0, 1] ]).astype(float) This scale matrix only accepts one parameter scaling the object uniformly along the x,y, axes. def init_Scale(s): return np.array( [ [s, 0, 0, 0], [0, s, 0, 0], [0 ,0, s, 0], [0, 0, 0, 1] ]).astype(float) Local vs Global Coordinates When we multiply any of the previous matrices by some point we are transforming that point in a global coordinate system (Origin(0,0,0)). For example, when multiplying a point by the translation matrix the point moves along the basis x,y,z axis. Local transformations requiere to define an internal local coordinate system. Origin, orientation, and scale of the local coordinate axes are chosen for conviniece, but usually the center of the object is selected to transform locally. How to use matrix multiplication to perform transformations in local coordinate systems Let's keep it simple, in order to perform any global transformation we chain matrix multiplications on the left side of expression. To achive local transformations just multiply on the right side of the expression. Keep in mind that matrix multiplication is not commutative: A*B != B*A Global Transformation: T3 * T2 * T1 * M(model_matrix) Local Transformation: M(model_matrix) * T1 * T2 * T3 Perspective matrix for rendering the scene. Frustum: truncated pyramid that defines the visible region. Parameters: - near / far distance: - angle of view: the angle between fron and bottom frustom planes. - aspect ratio: width / height of the rendered image. def init_Perspective(angleOfView=60, aspectRatio=1, near=0.1, far=1000): #convert to radians a = angleOfView *pi/180 d = 1.0 / tan(a/2) r = aspectRatio b = (far + near) / (near - far) c = 2 * far * near / (near - far) return np.array( [ [d/r, 0, 0, 0], [0, d, 0, 0], [0 ,0, b, c], [0, 0, -1, 0] ]).astype(float)]]></summary></entry><entry><title type="html">Plotting Splines with Plotly and export into HTML</title><link href="https://waloncab.github.io/s.ln_blog/s.ln_blog/blog/spline/lines/interpolation/2022/07/15/spline_plot.html" rel="alternate" type="text/html" title="Plotting Splines with Plotly and export into HTML" /><published>2022-07-15T09:56:49+02:00</published><updated>2022-07-15T09:56:49+02:00</updated><id>https://waloncab.github.io/s.ln_blog/s.ln_blog/blog/spline/lines/interpolation/2022/07/15/spline_plot</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog/s.ln_blog/blog/spline/lines/interpolation/2022/07/15/spline_plot.html"><![CDATA[<div>                        
        <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
        <script src="https://cdn.plot.ly/plotly-2.12.1.min.js"></script>                
        <div id="548b1779-dc2c-4101-9c59-907e69a2822c" class="plotly-graph-div" style="height:100%; width:100%;"></div>            
        <script type="text/javascript">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("548b1779-dc2c-4101-9c59-907e69a2822c")) {                    Plotly.newPlot(                        "548b1779-dc2c-4101-9c59-907e69a2822c",                        [{"hovertemplate":"x=%{x}<br>y=%{y}<extra></extra>","legendgroup":"","line":{"color":"#636efa","dash":"solid"},"marker":{"symbol":"circle"},"mode":"lines","name":"","orientation":"v","showlegend":false,"x":[18.34896474037398,18.80488049340869,19.345262663198817,19.966791841976892,20.70964001106374,21.535800950641647,22.44133434194411,23.422299866204618,24.535244105183033,25.72321014837906,26.981563797161122,28.305670852897602,29.616541719683177,30.97832718043522,32.38708691638718,33.838880608772584,35.32976793882492,36.855808587777666,38.41306223686432,39.908910840459896,41.42576659466821,42.960310091721766,44.50922192385313,46.0691826832948,47.63687296227936,49.20897335303931,50.782164447807205,52.353126838815555,53.826670962441256,55.29253308411682,56.74794579203368,58.19014167438326,59.616353319356975,61.02381331514627,62.49559788617513,63.9397700469874,65.3530103898156,66.73199950689224,68.07341799044991,69.37394643272114,70.63026542593842,71.8390555623343,72.99699743414135,74.10077163359207,75.14705875291901,76.13253938435473,77.05389412013172,77.95586220436726,78.77827655007823,79.51719683849812,80.1348498928716,80.67119423490773,81.12291045683905,81.4866791508981,81.75918090931742,81.93709632432953,82.01516918727023,82.00374843666978,81.99880092071912,81.79503503518819,81.30820387982655,80.54574653924118,79.53842456454545,78.35674747273139,77.02295200890596,75.59889802855798,74.12451831380922,72.60989722986965,71.08842730955911,69.59350108569754,68.13449238726024,66.7726541848198,65.52364089970223,64.46473413870982,63.62165938596629,63.03391747607135,62.9906903670905,62.63561547792887,62.484929505642654,62.60314479304276,63.05130693164393,63.843554664783696,64.91647481909182,66.18471776629724,67.56673086595883,69.00608814448354,70.48400060938516,71.996374106492,73.51961594721554,75.03361376527508,76.55271857962057,78.0639972344952,79.55588138262287,81.04983990746946,82.0229808822013,83.5042223966247,84.97071545169483,86.40170586122561,87.79417595844514,89.15425826887287,90.43554659036153,91.60700971835945,92.58945624233965,93.25550743253834,93.47127118240225,93.21915320506002,92.6035264916753,91.99027919875245,90.75599798426937,89.34333658069288,87.8918519531567,86.43784630657858,84.94687471173985,83.46911351074729,81.9646016984468,80.45493292887616,78.95895624756557,77.39964440913704,75.87845009389193,74.30931196229889,72.79822026154514,71.25172707776653,69.67309207393659,68.17357592552364,66.65155043589331,65.10966583177138,63.55057233988368,61.976920186956,60.39135959971414,58.79654080488394,57.195114029191174,55.58972949936168,53.983037442121244,52.37768808419569,50.77633165231084,49.18161837319247,47.5961984735664,46.02272218015845,44.46383971969442,42.92220131890011,41.40045720450135,39.90125760322393,38.32300078708568,36.77692616690885,35.266293405667064,33.794362166333926,32.27063256978143,30.79860150048458,29.382224982010797,27.942730728512245,26.57527632847268,25.211177792176702,23.93879612665792,22.70145201669731,21.579199156462238,20.578662146941163,19.706465589122544,18.969234083994834,18.37359223254649,17.945911157734162,17.65688610051912,17.51630953656035,17.50582039970609,17.606862796111923,17.8185366107109],"xaxis":"x","y":[85.49871951658865,87.01884885907312,88.4651684533784,89.8383311984872,91.21325537944674,92.50766988181668,93.72234973243748,94.85806995814956,95.9720806859988,96.99988983477583,97.94240891152768,98.80054942330142,99.53651673525562,100.19834681153046,100.78681467896628,101.30269536440359,101.74676389468276,102.11979529664426,102.4225645971285,102.64469648422701,102.80550051546244,102.90562958981735,102.94573660627458,102.9264744638167,102.84849606142649,102.71245429808651,102.51900207277956,102.26879228448826,101.9820377051663,101.64612920288441,101.26161110376376,100.8290277339254,100.34892341949052,99.82184248658022,99.21095541294265,98.54830353324719,97.83453974647651,97.07031695161328,96.2562880476402,95.39310593353996,94.48142350829524,93.52189367088869,92.51516932030307,91.46190335552102,90.36274867552521,89.21835817929835,88.02938476582312,86.72260349362332,85.36734698557163,83.96439026850847,82.5962752470856,81.18695702079532,79.73708848862032,78.24732254954328,76.7183121025469,75.15071004661385,73.64065136718817,72.09753040575829,71.97138958294641,70.47175278361084,69.04973098036919,67.7542960206586,66.62404239732464,65.69969112517342,64.96479815604854,64.43040532945318,64.09036960633877,63.93733224315469,63.974557001880456,64.20530764449562,64.64196427422326,65.28569040297323,66.15623411197993,67.22806147076449,68.49364082925894,69.8908263636964,70.03079277237576,71.50633953275153,73.012647743937,74.50562482263337,75.93945163490191,77.21823125928557,78.2700648972974,79.09120460016793,79.70516224753598,80.14732992661732,80.4534104522792,80.6483459049985,80.74713395243904,80.76346396491711,80.70798409720558,80.588142656803,80.41091798702405,80.17729984597523,79.99543381886116,79.66476422452645,79.26130466219898,78.78281062110702,78.21837339209618,77.54310800984673,76.74504098730061,75.78763643352693,74.63747312704375,73.2845038870499,71.80386048389792,70.31937709897355,68.93158053613553,67.98689247217216,67.14645864189042,66.53442119000358,66.01064299811812,65.54472414061777,65.10883540741335,64.70894442928463,64.32884172120923,63.971074004615566,63.637392124483085,63.30979102801047,63.00876435117078,62.71648219741927,62.45185737736429,62.19769073990608,61.955323849529,61.74094423762764,61.53910290985914,61.35089060783695,61.17739807317453,61.019716047485325,60.87893527238279,60.75614648948036,60.652440440391494,60.56890786672964,60.50663951010822,60.466726112140734,60.45025841444061,60.45832715862129,60.492023086296214,60.552436939078845,60.64065945858263,60.75778138642103,60.90489346420746,61.083086433555415,61.30973695530018,61.57466076328639,61.87919942199849,62.224694495920986,62.639877207995,63.10481378381912,63.62113238580177,64.22784149598293,64.89634705973978,65.67370282951059,66.52484670909288,67.5058889093045,68.57445505462906,69.73327160159957,70.98506500674907,72.3325617266106,73.77848821771721,75.24157950736404,76.79777743539876,78.35510055476702,79.90031902551686,81.42045653279973,83.01115431158367],"yaxis":"y","type":"scatter"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}},"xaxis":{"anchor":"y","domain":[0.0,1.0],"title":{"text":"x"}},"yaxis":{"anchor":"x","domain":[0.0,1.0],"title":{"text":"y"},"scaleanchor":"x","scaleratio":1},"legend":{"tracegroupgap":0},"margin":{"t":60}},                        {"responsive": true}                    )                };                            
        </script>        
    </div>

    <p>
        This spline plot has been generated using <a href="https://plotly.com/">Plotly</a>. There are many scenarios where a completly graphics engine is not necesary. Static visualization can be accomplished with simple libraries such as this one.
    </p>

    <p>
        Keep in mind what your target platforms for the plots are, and then have a look what fits your project best. In this case plotly instead of matplotlib or seaborn, allow simple html export with the full plotting toolbar. This small features make a difference when it comes to the export, have a look at the <a href="https://plotly.com/python/interactive-html-export/"> documentation</a>
    </p>

    <p>
        Now we are going to plot the data. Transform it into X and Y components, then use the Plotly commands to setup the axis and show it.
        This code has been copied from Jupyter notebook cell, use this notebooks to keep code and plotting data organized before auploading to remote servers.
    </p>

    <figure class="highlight"><pre><code class="language-pyhton" data-lang="pyhton">    import plotly.express as px
    
    fig = px.line(
        x = np.squeeze(np.asarray(X)), 
        y = np.squeeze(np.asarray(Y))
        )

    # scale the axis properly

    fig.update_yaxes(
        scaleanchor = "x",
        scaleratio = 1,
    )
    
    fig.show()

    </code></pre></figure>

    <p>
        After plotting the data, we need to export the generated graph to an html format. The following snippet does so.
    </p>

    <figure class="highlight"><pre><code class="language-pyhton" data-lang="pyhton">    fig.write_html("./exported/random_0.html",
    full_html=False,
    include_plotlyjs='cdn')

    </code></pre></figure>]]></content><author><name>waloncab</name></author><category term="blog" /><category term="spline" /><category term="lines" /><category term="interpolation" /><summary type="html"><![CDATA[This spline plot has been generated using Plotly. There are many scenarios where a completly graphics engine is not necesary. Static visualization can be accomplished with simple libraries such as this one. Keep in mind what your target platforms for the plots are, and then have a look what fits your project best. In this case plotly instead of matplotlib or seaborn, allow simple html export with the full plotting toolbar. This small features make a difference when it comes to the export, have a look at the documentation Now we are going to plot the data. Transform it into X and Y components, then use the Plotly commands to setup the axis and show it. This code has been copied from Jupyter notebook cell, use this notebooks to keep code and plotting data organized before auploading to remote servers. import plotly.express as px fig = px.line( x = np.squeeze(np.asarray(X)), y = np.squeeze(np.asarray(Y)) ) # scale the axis properly fig.update_yaxes( scaleanchor = "x", scaleratio = 1, ) fig.show() After plotting the data, we need to export the generated graph to an html format. The following snippet does so. fig.write_html("./exported/random_0.html", full_html=False, include_plotlyjs='cdn')]]></summary></entry><entry><title type="html">Audio Visualization sp.002</title><link href="https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/audio/visualization/2021/12/05/audio-visualization-003.html" rel="alternate" type="text/html" title="Audio Visualization sp.002" /><published>2021-12-05T10:44:49+01:00</published><updated>2021-12-05T10:44:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/audio/visualization/2021/12/05/audio-visualization-003</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/audio/visualization/2021/12/05/audio-visualization-003.html"><![CDATA[<p>Piano key strokes are more fun when you visualize in some form or another the sound produced.
Closed spline shape rendered along this small piano track, notice the small fast waves the contour forms.
Very pleasant effect that could be applied to many more music tracks like this.</p>]]></content><author><name>waloncab</name></author><category term="demos" /><category term="audio" /><category term="visualization" /><summary type="html"><![CDATA[Piano key strokes are more fun when you visualize in some form or another the sound produced. Closed spline shape rendered along this small piano track, notice the small fast waves the contour forms. Very pleasant effect that could be applied to many more music tracks like this.]]></summary></entry><entry><title type="html">Audio Visualization sp.002</title><link href="https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/audio/visualization/2021/12/04/audio-visualization-002.html" rel="alternate" type="text/html" title="Audio Visualization sp.002" /><published>2021-12-04T10:44:49+01:00</published><updated>2021-12-04T10:44:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/audio/visualization/2021/12/04/audio-visualization-002</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/audio/visualization/2021/12/04/audio-visualization-002.html"><![CDATA[<p>Everything you see in the video is generated at run-time. This time the audio visualizer uses 
not just a simple mesh but a line renderer to distinguish the contour of the shape.
The drums make the shape generate aggressive but very pleasant curves.</p>]]></content><author><name>waloncab</name></author><category term="demos" /><category term="audio" /><category term="visualization" /><summary type="html"><![CDATA[Everything you see in the video is generated at run-time. This time the audio visualizer uses not just a simple mesh but a line renderer to distinguish the contour of the shape. The drums make the shape generate aggressive but very pleasant curves.]]></summary></entry><entry><title type="html">Audio Visualization sp.001</title><link href="https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/audio/visualization/2021/12/03/audio-visualization-001.html" rel="alternate" type="text/html" title="Audio Visualization sp.001" /><published>2021-12-03T10:44:49+01:00</published><updated>2021-12-03T10:44:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/audio/visualization/2021/12/03/audio-visualization-001</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/audio/visualization/2021/12/03/audio-visualization-001.html"><![CDATA[<p>This video demonstrates how frequency bands can be used to make dynamic meshes. 
The mesh is modified at real-time by a redial disposition of those bands.
Notice that the code for this representation is being optimized since modifying a mesh every frame 
is an expensive task no matter how simple the mesh might be.</p>]]></content><author><name>waloncab</name></author><category term="demos" /><category term="audio" /><category term="visualization" /><summary type="html"><![CDATA[This video demonstrates how frequency bands can be used to make dynamic meshes. The mesh is modified at real-time by a redial disposition of those bands. Notice that the code for this representation is being optimized since modifying a mesh every frame is an expensive task no matter how simple the mesh might be.]]></summary></entry><entry><title type="html">Organic Algorithms</title><link href="https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/spline/2021/11/25/organic-algorithms.html" rel="alternate" type="text/html" title="Organic Algorithms" /><published>2021-11-25T10:44:49+01:00</published><updated>2021-11-25T10:44:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/spline/2021/11/25/organic-algorithms</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/spline/2021/11/25/organic-algorithms.html"><![CDATA[<p>
    Splines are some of the most organic pieces of graphics sofware you can find out there.
    This video is about how to add organic movement to the points conforming the line shape.
    Kinematic alogorithms use different interpolation methods to transport the spline dots smothly in space. 
    When we combine the lerp effect with some random seed generation to determine where to move the desired dot, 
    we achive some result similar to the one in the video. The spline lab is working on awesome new stuff.
</p>]]></content><author><name>waloncab</name></author><category term="demos" /><category term="spline" /><summary type="html"><![CDATA[Splines are some of the most organic pieces of graphics sofware you can find out there. This video is about how to add organic movement to the points conforming the line shape. Kinematic alogorithms use different interpolation methods to transport the spline dots smothly in space. When we combine the lerp effect with some random seed generation to determine where to move the desired dot, we achive some result similar to the one in the video. The spline lab is working on awesome new stuff.]]></summary></entry><entry><title type="html">Reel Showcase</title><link href="https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/spline/2021/11/25/breath-animation.html" rel="alternate" type="text/html" title="Reel Showcase" /><published>2021-11-25T10:44:49+01:00</published><updated>2021-11-25T10:44:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/spline/2021/11/25/breath-animation</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/spline/2021/11/25/breath-animation.html"><![CDATA[<p>This time with breathing graphics, real time parallel processing for dynamic spline follow.
Closed loop behavior algorithm allows to follow any closed line shape at a constant speed. 
One big challenge is keep the iteration distance independent from the actual spline path that we’re iterating through.</p>

<p>Stay tuned for more videos like this, the spline lab is working on awesome new stuff.</p>]]></content><author><name>waloncab</name></author><category term="demos" /><category term="spline" /><summary type="html"><![CDATA[This time with breathing graphics, real time parallel processing for dynamic spline follow. Closed loop behavior algorithm allows to follow any closed line shape at a constant speed. One big challenge is keep the iteration distance independent from the actual spline path that we’re iterating through.]]></summary></entry><entry><title type="html">Motion Graphics</title><link href="https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/spline/2021/11/25/motion-graphics.html" rel="alternate" type="text/html" title="Motion Graphics" /><published>2021-11-25T10:44:49+01:00</published><updated>2021-11-25T10:44:49+01:00</updated><id>https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/spline/2021/11/25/motion-graphics</id><content type="html" xml:base="https://waloncab.github.io/s.ln_blog/s.ln_blog/demos/spline/2021/11/25/motion-graphics.html"><![CDATA[<p>
    Scaling the project to handle different types of lines and the technology around them. 
    ollowing path behavior within procedural line animations to make pleasant effects.
</p>

<!--more-->]]></content><author><name>waloncab</name></author><category term="demos" /><category term="spline" /><summary type="html"><![CDATA[Scaling the project to handle different types of lines and the technology around them. ollowing path behavior within procedural line animations to make pleasant effects.]]></summary></entry></feed>